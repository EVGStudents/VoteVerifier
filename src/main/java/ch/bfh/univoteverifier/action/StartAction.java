/*
 *
 *  Copyright (c) 2013 Berner Fachhochschule, Switzerland.
 *   Bern University of Applied Sciences, Engineering and Information Technology,
 *   Research Institute for Security in the Information Society, E-Voting Group,
 *   Biel, Switzerland.
 *
 *   Project independent VoteVerifier.
 *
 */
package ch.bfh.univoteverifier.action;

import ch.bfh.univote.election.ElectionBoardServiceFault;
import ch.bfh.univoteverifier.common.ElectionBoardProxy;
import ch.bfh.univoteverifier.common.IFileManager;
import ch.bfh.univoteverifier.common.Messenger;
import ch.bfh.univoteverifier.common.MessengerManager;
import ch.bfh.univoteverifier.common.QRCode;
import ch.bfh.univoteverifier.gui.ElectionReceipt;
import ch.bfh.univoteverifier.gui.GUIconstants;
import ch.bfh.univoteverifier.gui.MiddlePanel;
import ch.bfh.univoteverifier.gui.ThreadManager;
import ch.bfh.univoteverifier.verification.VerificationThread;
import java.awt.event.ActionEvent;
import java.io.File;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import static javax.swing.Action.NAME;
import javax.swing.JComboBox;

/**
 * An Action Class that manages the action of clicking on the start button.
 *
 * @author Justin Springer
 */
public class StartAction extends AbstractAction {

    private MessengerManager mm;
    private MiddlePanel middlePanel;
    private ResourceBundle rb;
    private JComboBox comboBox;
    private IFileManager fm;
    private ElectionReceipt er;
    private ThreadManager tm;
    private static final Logger LOGGER = Logger.getLogger(StartAction.class.getName());

    /**
     * Create an instance of this Action class.
     *
     * @param msgr Messenger object used to send messages
     * @param middlePanel
     * @param comboBox
     * @param qrCodeFile
     */
    public StartAction(MessengerManager mm, MiddlePanel middlePanel, JComboBox comboBox, IFileManager fm, ThreadManager tm) {
        rb = ResourceBundle.getBundle("error", GUIconstants.getLocale());
        this.middlePanel = middlePanel;
        this.mm = mm;
        this.comboBox = comboBox;
        this.fm = fm;
        putValue(NAME, rb.getString("start"));
        this.tm = tm;
    }

    /**
     * This method is called when an action is performed on a component to which
     * this Action has been registered
     *
     * @param e ActionEvent generated by the component on which an action was
     * performed.
     */
    @Override
    public void actionPerformed(ActionEvent e) {
        startVerification();
    }

    /**
     * Start an individual or universal verification.
     */
    public void startVerification() {
        String btnTxt = middlePanel.getSelectedVrfType();
        String msg = "";
        int uniqueness = (int) (System.currentTimeMillis() / 1000L);
        VerificationThread vt;
        if (btnTxt.equals("btnUni")) {
            String eID = comboBox.getSelectedItem().toString();
            if (!checkIfValidEID(eID)) {
                mm.getDefaultMessenger().sendSetupError(rb.getString("invalidEIDorNetworkProb"));
            } else {
                msg = rb.getString("beginningVrfFor") + " " + eID;
                mm.getDefaultMessenger().sendSetupError(msg);

                String processID = eID + uniqueness;
                Messenger msgr = mm.getNewMessenger(processID);
                vt = new VerificationThread(msgr, eID);
                vt.setName(eID);
                tm.addThread(vt);
                vt.start();
            }
        } else {
            if (fm.getFile() != null) {

                if (fileProvidedIsValid()) {
                    msg += rb.getString("ballotProvided");
                    String eID = er.getElectionID();
                    String processID = "IND" + eID + uniqueness;
                    Messenger msgr = mm.getNewMessenger(processID);
                    vt = new VerificationThread(msgr, er);
                    vt.setName(er.getElectionID());
                    vt.start();
                    tm.addThread(vt);
                }
            } else {
                mm.getDefaultMessenger().sendSetupError(rb.getString("pleaseSelectFile"));
            }
            middlePanel.resetFileText();
        }

    }

    /**
     * Check if the eID provided is valid.
     *
     * @param eID the election ID to check the validity of.
     * @return true if the election board has a matching election ID.
     */
    public boolean checkIfValidEID(String eID) {
        ElectionBoardProxy ebp = new ElectionBoardProxy(eID);
        boolean isValid = false;
        try {
            isValid = ebp.getElectionsID().getElectionId().contains(eID);
        } catch (ElectionBoardServiceFault ex) {
            Logger.getLogger(StartAction.class.getName()).log(Level.SEVERE, null, ex);
        }
        return isValid;
    }

    /**
     * Check that we have a valid QR Code before proceeding with verification
     * steps.
     *
     * @return True if a QR Code has been detected.
     */
    public boolean fileProvidedIsValid() {
        er = getElectionReceipt(fm.getFile(), mm.getDefaultMessenger());
        return (er != null);
    }

    /**
     * Translate a file with the path to a QRCode into an ElectionReceipt object
     *
     * @param qrCodeFile the File to a QRcode
     * @param msgr Messenger which transports error messages, etc.
     * @return the ElectionReceipt helper class containing getter methods for
     * the variables.
     */
    public ElectionReceipt getElectionReceipt(File qrCodeFile, Messenger msgr) {
        QRCode qr = new QRCode(msgr);
        return qr.decodeReceipt(qrCodeFile);
    }
}
